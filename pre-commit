#!/bin/bash

# Plugin directory path
PLUGINS_PATH="lua/plugins"
README_PATH="README.md"

# Placeholder line in README where to insert the list
PLACEHOLDER="### Plugins used:"

# Ensure paths exist
if [ ! -d "$PLUGINS_PATH" ]; then
  echo "Error: target directory '$PLUGINS_PATH' does not exist."
  exit 1
fi

TEMP_FILE=$(mktemp)

# Loops through plugins in PLUGINS_PATH and generates markdown links from plugin names
create_plugin_md_links() {
  for file_path in "$PLUGINS_PATH"/*; do
    if [ -f "$file_path" ]; then
      # Read the first two lines of the file, strip newlines
      first_two_lines=$(head -n 2 "$file_path" | tr -d '\n')

      # Extract the full plugin name from the combined two lines with bash regex (regex generated by perplexity)
      # return --> matches "return"
      # [[:space:]]* --> matches zero or more whitespace chars
      # \{[[:space:]]*[\"\'] --> matches {, one or more whitespace chars, and an opening double/single quote
      # ([^\"\']+) --> matches one or more chars that are not a double/single quote and captures it into the BASH_REMATCH variable
      # [\"\'] --> matches a closing double/single quote
      if [[ $first_two_lines =~ return[[:space:]]*\{[[:space:]]*[\"\']([^\"\']+)[\"\'] ]]; then
        # BASH_REMATCH[1] index 1 holds JUST the captured text within the parentheses (e.g. the plugin name without quotes) instead of all captured text which could include curly braces or quotes
        full_plugin_name="${BASH_REMATCH[1]}"
        # Extract plugin name after the slash
        plugin_name="${full_plugin_name#*/}"

        # Generate markdown link
        printf "%-20s\t%s\n" "- ${file_path#*/*/}" "--> [$plugin_name](https://github.com/$full_plugin_name)" >> "$TEMP_FILE"
      else
        # Fallback to just filename if pattern not matched
        filename=$(basename "$file_path")
        echo "- $filename" >> "$TEMP_FILE"
      fi
    fi
  done
}

printf "%s\n\n" "# This is my personal [neovim](https://github.com/neovim/neovim) config." >> "$TEMP_FILE"
printf "%s\n\n" "It changes a lot. But I think it's pretty cool." >> "$TEMP_FILE"
printf "%s\n\n" "I keep these plugins up-to-date, and I'm using them with no problem on neovim version $(nvim --version | head -n 1 | awk '{print $2}')." >> "$TEMP_FILE"

printf "%s\n\n" "### Plugins Used" >> "$TEMP_FILE"
# List plugins from files in PLUGINS_PATH as markdown links
create_plugin_md_links >> "$TEMP_FILE"

# Overwrite readme with updated content
mv "$TEMP_FILE" "$README_PATH"

# Stage the updated readme for commit
# git add "$README_PATH"

exit 0
